/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package candy.fabric;

import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;

/**
 *
 * @author Moni
 */
public class ProductLast extends javax.swing.JFrame {

    /**
     * Creates new form ProductLast
     */
    public ProductLast() {
        initComponents();
      //   getContentPane().setBackground(new Color( 59 , 63 , 66));
    }
    
       javax.swing.table.DefaultTableModel tableModel = new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "ID", "Name", "Cost", "Amount"
            }
        ); 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProductID = new javax.swing.JLabel();
        ProductName = new javax.swing.JLabel();
        ProductAmount = new javax.swing.JLabel();
        ProducCost = new javax.swing.JLabel();
        ProID = new javax.swing.JTextField();
        ProName = new javax.swing.JTextField();
        ProAmount = new javax.swing.JTextField();
        ProCost = new javax.swing.JTextField();
        ExtraDefination = new javax.swing.JLabel();
        ExtraDefScrollPanel = new javax.swing.JScrollPane();
        DefinationArea = new javax.swing.JTextArea();
        AddProduct = new javax.swing.JButton();
        UpdateProduct = new javax.swing.JButton();
        SearchProduct = new javax.swing.JButton();
        ShowAllProduct = new javax.swing.JButton();
        DeleteProduct = new javax.swing.JButton();
        GoBack = new javax.swing.JButton();
        InfoTableScrollPanel = new javax.swing.JScrollPane();
        infoTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ProductID.setText("Product ID");

        ProductName.setText("Product Name");

        ProductAmount.setText("Product Amount");

        ProducCost.setText("Product Cost");

        ProID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProIDMouseClicked(evt);
            }
        });
        ProID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProIDActionPerformed(evt);
            }
        });

        ProName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProNameMouseClicked(evt);
            }
        });

        ProAmount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProAmountMouseClicked(evt);
            }
        });

        ProCost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProCostMouseClicked(evt);
            }
        });
        ProCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProCostActionPerformed(evt);
            }
        });

        ExtraDefination.setText("Extra Defination");

        DefinationArea.setColumns(20);
        DefinationArea.setRows(5);
        ExtraDefScrollPanel.setViewportView(DefinationArea);
        DefinationArea.getAccessibleContext().setAccessibleParent(ExtraDefination);

        AddProduct.setText("Add Product");
        AddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProductActionPerformed(evt);
            }
        });

        UpdateProduct.setText("Update Product");
        UpdateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateProductActionPerformed(evt);
            }
        });

        SearchProduct.setText("Search Product");
        SearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchProductActionPerformed(evt);
            }
        });

        ShowAllProduct.setText("Show All Product");
        ShowAllProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllProductActionPerformed(evt);
            }
        });

        DeleteProduct.setText("Delete Product");
        DeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteProductActionPerformed(evt);
            }
        });

        GoBack.setText("Go Back");
        GoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoBackActionPerformed(evt);
            }
        });

        infoTable.setBackground(new java.awt.Color(73, 77, 78));
        infoTable.setForeground(new java.awt.Color(204, 204, 204));
        infoTable.setModel(tableModel);
        infoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoTableMouseClicked(evt);
            }
        });
        InfoTableScrollPanel.setViewportView(infoTable);
        infoTable.getAccessibleContext().setAccessibleParent(infoTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ShowAllProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UpdateProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SearchProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DeleteProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GoBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(InfoTableScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProductName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProducCost, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(ProductID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProductAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ProName)
                    .addComponent(ProAmount)
                    .addComponent(ProID, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProCost, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExtraDefScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExtraDefination))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ExtraDefination)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExtraDefScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ProID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ProName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ProductName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ProCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ProducCost))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProductAmount))))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ShowAllProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(GoBack))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(InfoTableScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProIDActionPerformed

    private void infoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoTableMouseClicked
        // TODO add your handling code here:
  DatabaseConnection databaseConnection = new DatabaseConnection();
        int selectedRow = infoTable.getSelectedRow();
        try {
             String selectedID = String.valueOf(infoTable.getValueAt(selectedRow, 0));
              String query = "SELECT ID, Name,CurAmount , Cost FROM Product WHERE ID = '"+selectedID+"'";
        ResultSet resultSet = databaseConnection.getData(query);
       
            while(resultSet.next()){
                ProID.setText(resultSet.getString("ID")); 
                ProName.setText(resultSet.getString("Name")); 
              ProAmount.setText(resultSet.getString("Cost"));  
              ProCost.setText(resultSet.getString("CurAmount"));
              
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }catch(NullPointerException e){
            System.out.println("You have selected empty row");
        }
  
    }//GEN-LAST:event_infoTableMouseClicked

    private void AddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProductActionPerformed
        // TODO add your handling code here:
        Product product=new Product(ProID.getText(),ProName.getText(),ProCost.getText(),ProAmount.getText());   
        product.addProduct();      
        
      makeFormEmpty();
    }//GEN-LAST:event_AddProductActionPerformed

    private void UpdateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateProductActionPerformed
        // TODO add your handling code here:
       int selectedRow = infoTable.getSelectedRow();
            
       String selectedID = String.valueOf(infoTable.getValueAt(selectedRow, 0));
             
     
      DatabaseConnection databaseConnection = new DatabaseConnection();
      try{
      String  query= "UPdate Product SET ID = '"+ProID.getText()+"', Name= '"+ProName.getText()+"',CurAmount='"+ProAmount.getText()+"',Cost ='"+ProCost.getText()+"' WHERE ID ='"+selectedID+"'";
        databaseConnection.updateData(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
  
       showTableResult();
        makeFormEmpty();

    }//GEN-LAST:event_UpdateProductActionPerformed

    private void SearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchProductActionPerformed
        // TODO add your handling code here:
         DatabaseConnection dbc = new DatabaseConnection();
        
        String query = "SELECT ID, Name, Cost, Amount FROM Product WHERE ID = '"+ProID.getText()+"'";
        ResultSet resultSet = dbc.getData(query);
        
        try
        {
            
            int i=0;
            
                while (resultSet.next()) 
                {
                    Object[] row = { null, null, null,null};
                    tableModel.addRow(row);
                    infoTable.setValueAt(resultSet.getString(1), i, 0);
                    infoTable.setValueAt(resultSet.getString(2), i, 1);
                    infoTable.setValueAt(resultSet.getString(3), i, 2);
                    infoTable.setValueAt(resultSet.getString(4), i, 3);
                    i++;
                }
                    
        }
        catch(SQLException e)
        {
                System.out.println(e);
        } 
  
    }//GEN-LAST:event_SearchProductActionPerformed

    private void ShowAllProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllProductActionPerformed
        // TODO add your handling code here:
         tableModel.setRowCount(0);
     DatabaseConnection databaseObj = new DatabaseConnection();
        String query = "SELECT ID, Name, Cost, CurAmount FROM Product";
        ResultSet resultSet = databaseObj.getData(query);
        
        infoTable.repaint();

       
       
        for(int i=0; i<infoTable.getRowCount();i++)
        {
            tableModel.removeRow(i);
        }
                
        try
        {
            int i=0;
            
                while (resultSet.next()) 
                {
                    Object[] row = { null, null, null,null};
                    tableModel.addRow(row);
                    infoTable.setValueAt(resultSet.getString(1), i, 0);
                    infoTable.setValueAt(resultSet.getString(2), i, 1);
                    infoTable.setValueAt(resultSet.getString(3), i, 2);
                    infoTable.setValueAt(resultSet.getString(4), i, 3);
                    i++;

                }
                    
        }
        catch(SQLException e)
        {
                System.out.println(e);
        }  
    }//GEN-LAST:event_ShowAllProductActionPerformed

    private void DeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteProductActionPerformed
        // TODO add your handling code here:
     
         int selectedRow = infoTable.getSelectedRow();
        String selectedID = String.valueOf(infoTable.getValueAt(selectedRow, 0));
        
        System.out.println("Row Selection: "+selectedRow);
        System.out.println("Product ID: "+selectedID);
        
        String query="Delete * from Product WHERE ID='"+selectedID+"'";
	new DatabaseConnection().deleteData(query);
        
        tableModel.removeRow(selectedRow);
        infoTable.repaint();
        
 
    }//GEN-LAST:event_DeleteProductActionPerformed

    private void GoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoBackActionPerformed
        // TODO add your handling code here:
        
         MainFrame mainForm = new MainFrame();
                        mainForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                        mainForm.pack();
                        mainForm.setLocationRelativeTo(null);
                        mainForm.setVisible(true);
                        super.dispose();
    }//GEN-LAST:event_GoBackActionPerformed

    private void ProIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProIDMouseClicked
        // TODO add your handling code here:
         if(ProID.getText().equals("000"))
        {
            ProID.setText("");
        }
    }//GEN-LAST:event_ProIDMouseClicked

    private void ProNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProNameMouseClicked
        // TODO add your handling code here:
         if(ProName.getText().equals("Moni"))
        {
            ProName.setText("");
        } 
        
    }//GEN-LAST:event_ProNameMouseClicked

    private void ProCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProCostActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ProCostActionPerformed

    private void ProAmountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProAmountMouseClicked
        // TODO add your handling code here:
      if(ProAmount.getText().equals("0000"))
        {
            ProAmount.setText("");
        }   
        
    }//GEN-LAST:event_ProAmountMouseClicked

    private void ProCostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProCostMouseClicked
        // TODO add your handling code here:
        if(ProCost.getText().equals("1000$"))
        {
            ProCost.setText("");
        } 
    }//GEN-LAST:event_ProCostMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductLast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductLast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductLast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductLast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductLast().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddProduct;
    private javax.swing.JTextArea DefinationArea;
    private javax.swing.JButton DeleteProduct;
    private javax.swing.JScrollPane ExtraDefScrollPanel;
    private javax.swing.JLabel ExtraDefination;
    private javax.swing.JButton GoBack;
    private javax.swing.JScrollPane InfoTableScrollPanel;
    private javax.swing.JTextField ProAmount;
    private javax.swing.JTextField ProCost;
    private javax.swing.JTextField ProID;
    private javax.swing.JTextField ProName;
    private javax.swing.JLabel ProducCost;
    private javax.swing.JLabel ProductAmount;
    private javax.swing.JLabel ProductID;
    private javax.swing.JLabel ProductName;
    private javax.swing.JButton SearchProduct;
    private javax.swing.JButton ShowAllProduct;
    private javax.swing.JButton UpdateProduct;
    private javax.swing.JTable infoTable;
    // End of variables declaration//GEN-END:variables

   
 private void showTableResult(){
 tableModel.setRowCount(0);
    DatabaseConnection databaseConnection =new DatabaseConnection();
    String query = "SELECT ID, Name,CurAmount , Cost FROM Product";
        ResultSet resultSet = databaseConnection.getData(query);
        
        infoTable.repaint();

       
        for(int i=0; i<infoTable.getRowCount();i++)
        {
            tableModel.removeRow(i);
        }
                
        try
        {
           
            int i=0;
            
                while (resultSet.next()) 
                {
                    Object[] row = { null, null, null,null};
                    tableModel.addRow(row);
                    infoTable.setValueAt(resultSet.getString(1), i, 0);
                    infoTable.setValueAt(resultSet.getString(2), i, 1);
                    infoTable.setValueAt(resultSet.getString(3), i, 2);
                    infoTable.setValueAt(resultSet.getString(4), i, 3);
                    i++;

                }
                    
        }
        catch(SQLException e)
        {
                System.out.println(e);
        }
        finally{
            resultSet=null;
        }

}
    private void makeFormEmpty() {
           ProID.setText(""); 
           ProName.setText("");
           ProAmount.setText("") ;
           ProCost.setText("");
        
        
       }
}
